// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: discovery.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 设备能力枚举
enum Nearclip_Discovery_DeviceCapability: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case capabilityUnknown // = 0
  case capabilityClipboardRead // = 1
  case capabilityClipboardWrite // = 2
  case capabilityFileTransfer // = 3
  case capabilityEncryption // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .capabilityUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .capabilityUnknown
    case 1: self = .capabilityClipboardRead
    case 2: self = .capabilityClipboardWrite
    case 3: self = .capabilityFileTransfer
    case 4: self = .capabilityEncryption
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .capabilityUnknown: return 0
    case .capabilityClipboardRead: return 1
    case .capabilityClipboardWrite: return 2
    case .capabilityFileTransfer: return 3
    case .capabilityEncryption: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Nearclip_Discovery_DeviceCapability] = [
    .capabilityUnknown,
    .capabilityClipboardRead,
    .capabilityClipboardWrite,
    .capabilityFileTransfer,
    .capabilityEncryption,
  ]

}

/// 设备类型枚举
enum Nearclip_Discovery_DeviceType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknown // = 0
  case android // = 1
  case mac // = 2
  case windows // = 3
  case ios // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .android
    case 2: self = .mac
    case 3: self = .windows
    case 4: self = .ios
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .android: return 1
    case .mac: return 2
    case .windows: return 3
    case .ios: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Nearclip_Discovery_DeviceType] = [
    .unknown,
    .android,
    .mac,
    .windows,
    .ios,
  ]

}

/// 设备广播消息
struct Nearclip_Discovery_DeviceBroadcast: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceID: String = String()

  var deviceName: String = String()

  var deviceType: Nearclip_Discovery_DeviceType = .unknown

  var capabilities: [Nearclip_Discovery_DeviceCapability] = []

  /// 协议版本
  var version: String = String()

  var timestamp: UInt64 = 0

  /// 用于配对的公钥
  var publicKey: Data = Data()

  /// 扩展元数据
  var metadata: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 设备扫描请求
struct Nearclip_Discovery_ScanRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeoutSeconds: UInt32 = 0

  var filterTypes: [Nearclip_Discovery_DeviceType] = []

  var requiredCapabilities: [Nearclip_Discovery_DeviceCapability] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 设备扫描响应
struct Nearclip_Discovery_ScanResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var devices: [Nearclip_Discovery_DeviceBroadcast] = []

  var scanDurationMs: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 设备查询消息
struct Nearclip_Discovery_DeviceQuery: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceID: String = String()

  var capabilities: [Nearclip_Discovery_DeviceCapability] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 设备查询响应
struct Nearclip_Discovery_DeviceQueryResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var device: Nearclip_Discovery_DeviceBroadcast {
    get {return _device ?? Nearclip_Discovery_DeviceBroadcast()}
    set {_device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return self._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {self._device = nil}

  var isOnline: Bool = false

  var lastSeen: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _device: Nearclip_Discovery_DeviceBroadcast? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "nearclip.discovery"

extension Nearclip_Discovery_DeviceCapability: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0CAPABILITY_UNKNOWN\0\u{1}CAPABILITY_CLIPBOARD_READ\0\u{1}CAPABILITY_CLIPBOARD_WRITE\0\u{1}CAPABILITY_FILE_TRANSFER\0\u{1}CAPABILITY_ENCRYPTION\0")
}

extension Nearclip_Discovery_DeviceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0DEVICE_TYPE_UNKNOWN\0\u{1}DEVICE_TYPE_ANDROID\0\u{1}DEVICE_TYPE_MAC\0\u{1}DEVICE_TYPE_WINDOWS\0\u{1}DEVICE_TYPE_IOS\0")
}

extension Nearclip_Discovery_DeviceBroadcast: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceBroadcast"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}device_id\0\u{3}device_name\0\u{3}device_type\0\u{1}capabilities\0\u{1}version\0\u{1}timestamp\0\u{3}public_key\0\u{1}metadata\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.deviceName) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.deviceType) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.capabilities) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      case 8: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.metadata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if !self.deviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceName, fieldNumber: 2)
    }
    if self.deviceType != .unknown {
      try visitor.visitSingularEnumField(value: self.deviceType, fieldNumber: 3)
    }
    if !self.capabilities.isEmpty {
      try visitor.visitPackedEnumField(value: self.capabilities, fieldNumber: 4)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 5)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 6)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 7)
    }
    if !self.metadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.metadata, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Discovery_DeviceBroadcast, rhs: Nearclip_Discovery_DeviceBroadcast) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.deviceName != rhs.deviceName {return false}
    if lhs.deviceType != rhs.deviceType {return false}
    if lhs.capabilities != rhs.capabilities {return false}
    if lhs.version != rhs.version {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Discovery_ScanRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ScanRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}timeout_seconds\0\u{3}filter_types\0\u{3}required_capabilities\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.timeoutSeconds) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.filterTypes) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.requiredCapabilities) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timeoutSeconds != 0 {
      try visitor.visitSingularUInt32Field(value: self.timeoutSeconds, fieldNumber: 1)
    }
    if !self.filterTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.filterTypes, fieldNumber: 2)
    }
    if !self.requiredCapabilities.isEmpty {
      try visitor.visitPackedEnumField(value: self.requiredCapabilities, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Discovery_ScanRequest, rhs: Nearclip_Discovery_ScanRequest) -> Bool {
    if lhs.timeoutSeconds != rhs.timeoutSeconds {return false}
    if lhs.filterTypes != rhs.filterTypes {return false}
    if lhs.requiredCapabilities != rhs.requiredCapabilities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Discovery_ScanResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ScanResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}devices\0\u{3}scan_duration_ms\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.devices) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.scanDurationMs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.devices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.devices, fieldNumber: 1)
    }
    if self.scanDurationMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.scanDurationMs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Discovery_ScanResponse, rhs: Nearclip_Discovery_ScanResponse) -> Bool {
    if lhs.devices != rhs.devices {return false}
    if lhs.scanDurationMs != rhs.scanDurationMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Discovery_DeviceQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceQuery"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}device_id\0\u{1}capabilities\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.capabilities) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if !self.capabilities.isEmpty {
      try visitor.visitPackedEnumField(value: self.capabilities, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Discovery_DeviceQuery, rhs: Nearclip_Discovery_DeviceQuery) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.capabilities != rhs.capabilities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Discovery_DeviceQueryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceQueryResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}device\0\u{3}is_online\0\u{3}last_seen\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._device) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isOnline) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.lastSeen) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._device {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.isOnline != false {
      try visitor.visitSingularBoolField(value: self.isOnline, fieldNumber: 2)
    }
    if self.lastSeen != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastSeen, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Discovery_DeviceQueryResponse, rhs: Nearclip_Discovery_DeviceQueryResponse) -> Bool {
    if lhs._device != rhs._device {return false}
    if lhs.isOnline != rhs.isOnline {return false}
    if lhs.lastSeen != rhs.lastSeen {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
