// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sync.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 数据类型枚举
enum Nearclip_Sync_DataType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknown // = 0
  case text // = 1
  case image // = 2
  case file // = 3
  case url // = 4
  case richText // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .text
    case 2: self = .image
    case 3: self = .file
    case 4: self = .url
    case 5: self = .richText
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .text: return 1
    case .image: return 2
    case .file: return 3
    case .url: return 4
    case .richText: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Nearclip_Sync_DataType] = [
    .unknown,
    .text,
    .image,
    .file,
    .url,
    .richText,
  ]

}

/// 同步操作枚举
enum Nearclip_Sync_SyncOperation: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case syncUnknown // = 0
  case syncCreate // = 1
  case syncUpdate // = 2
  case syncDelete // = 3
  case syncReplace // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .syncUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .syncUnknown
    case 1: self = .syncCreate
    case 2: self = .syncUpdate
    case 3: self = .syncDelete
    case 4: self = .syncReplace
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .syncUnknown: return 0
    case .syncCreate: return 1
    case .syncUpdate: return 2
    case .syncDelete: return 3
    case .syncReplace: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Nearclip_Sync_SyncOperation] = [
    .syncUnknown,
    .syncCreate,
    .syncUpdate,
    .syncDelete,
    .syncReplace,
  ]

}

/// 剪贴板数据项
struct Nearclip_Sync_ClipboardData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataID: String = String()

  var type: Nearclip_Sync_DataType = .unknown

  var content: Data = Data()

  var metadata: Dictionary<String,String> = [:]

  var createdAt: UInt64 = 0

  var expiresAt: UInt64 = 0

  var sourceApp: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 数据分片信息
struct Nearclip_Sync_DataChunk: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataID: String = String()

  var chunkIndex: UInt32 = 0

  var totalChunks: UInt32 = 0

  var chunkData: Data = Data()

  var checksum: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 同步消息
struct Nearclip_Sync_SyncMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceID: String = String()

  var operation: Nearclip_Sync_SyncOperation = .syncUnknown

  var data: Nearclip_Sync_ClipboardData {
    get {return _data ?? Nearclip_Sync_ClipboardData()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var chunks: [Nearclip_Sync_DataChunk] = []

  var timestamp: UInt64 = 0

  var signature: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: Nearclip_Sync_ClipboardData? = nil
}

/// 同步确认
struct Nearclip_Sync_SyncAck: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataID: String = String()

  var success: Bool = false

  var errorMessage: String = String()

  var timestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 同步状态查询
struct Nearclip_Sync_SyncStatusQuery: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceID: String = String()

  var sinceTimestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 同步状态响应
struct Nearclip_Sync_SyncStatusResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pendingDataIds: [String] = []

  var completedDataIds: [String] = []

  var lastSyncTimestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "nearclip.sync"

extension Nearclip_Sync_DataType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0DATA_TYPE_UNKNOWN\0\u{1}DATA_TYPE_TEXT\0\u{1}DATA_TYPE_IMAGE\0\u{1}DATA_TYPE_FILE\0\u{1}DATA_TYPE_URL\0\u{1}DATA_TYPE_RICH_TEXT\0")
}

extension Nearclip_Sync_SyncOperation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0SYNC_UNKNOWN\0\u{1}SYNC_CREATE\0\u{1}SYNC_UPDATE\0\u{1}SYNC_DELETE\0\u{1}SYNC_REPLACE\0")
}

extension Nearclip_Sync_ClipboardData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClipboardData"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}data_id\0\u{1}type\0\u{1}content\0\u{1}metadata\0\u{3}created_at\0\u{3}expires_at\0\u{3}source_app\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dataID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.metadata) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.createdAt) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.expiresAt) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.sourceApp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataID.isEmpty {
      try visitor.visitSingularStringField(value: self.dataID, fieldNumber: 1)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 3)
    }
    if !self.metadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.metadata, fieldNumber: 4)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdAt, fieldNumber: 5)
    }
    if self.expiresAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.expiresAt, fieldNumber: 6)
    }
    if !self.sourceApp.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceApp, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Sync_ClipboardData, rhs: Nearclip_Sync_ClipboardData) -> Bool {
    if lhs.dataID != rhs.dataID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.content != rhs.content {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.expiresAt != rhs.expiresAt {return false}
    if lhs.sourceApp != rhs.sourceApp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Sync_DataChunk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataChunk"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}data_id\0\u{3}chunk_index\0\u{3}total_chunks\0\u{3}chunk_data\0\u{1}checksum\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dataID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.chunkIndex) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.totalChunks) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.chunkData) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.checksum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataID.isEmpty {
      try visitor.visitSingularStringField(value: self.dataID, fieldNumber: 1)
    }
    if self.chunkIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.chunkIndex, fieldNumber: 2)
    }
    if self.totalChunks != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalChunks, fieldNumber: 3)
    }
    if !self.chunkData.isEmpty {
      try visitor.visitSingularBytesField(value: self.chunkData, fieldNumber: 4)
    }
    if !self.checksum.isEmpty {
      try visitor.visitSingularBytesField(value: self.checksum, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Sync_DataChunk, rhs: Nearclip_Sync_DataChunk) -> Bool {
    if lhs.dataID != rhs.dataID {return false}
    if lhs.chunkIndex != rhs.chunkIndex {return false}
    if lhs.totalChunks != rhs.totalChunks {return false}
    if lhs.chunkData != rhs.chunkData {return false}
    if lhs.checksum != rhs.checksum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Sync_SyncMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SyncMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}device_id\0\u{1}operation\0\u{1}data\0\u{1}chunks\0\u{1}timestamp\0\u{1}signature\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.operation) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.chunks) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if self.operation != .syncUnknown {
      try visitor.visitSingularEnumField(value: self.operation, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.chunks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chunks, fieldNumber: 4)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 5)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Sync_SyncMessage, rhs: Nearclip_Sync_SyncMessage) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.operation != rhs.operation {return false}
    if lhs._data != rhs._data {return false}
    if lhs.chunks != rhs.chunks {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Sync_SyncAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SyncAck"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}data_id\0\u{1}success\0\u{3}error_message\0\u{1}timestamp\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dataID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataID.isEmpty {
      try visitor.visitSingularStringField(value: self.dataID, fieldNumber: 1)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 2)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 3)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Sync_SyncAck, rhs: Nearclip_Sync_SyncAck) -> Bool {
    if lhs.dataID != rhs.dataID {return false}
    if lhs.success != rhs.success {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Sync_SyncStatusQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SyncStatusQuery"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}device_id\0\u{3}since_timestamp\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.sinceTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if self.sinceTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.sinceTimestamp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Sync_SyncStatusQuery, rhs: Nearclip_Sync_SyncStatusQuery) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.sinceTimestamp != rhs.sinceTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Sync_SyncStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SyncStatusResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}pending_data_ids\0\u{3}completed_data_ids\0\u{3}last_sync_timestamp\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.pendingDataIds) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.completedDataIds) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.lastSyncTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pendingDataIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.pendingDataIds, fieldNumber: 1)
    }
    if !self.completedDataIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.completedDataIds, fieldNumber: 2)
    }
    if self.lastSyncTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastSyncTimestamp, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Sync_SyncStatusResponse, rhs: Nearclip_Sync_SyncStatusResponse) -> Bool {
    if lhs.pendingDataIds != rhs.pendingDataIds {return false}
    if lhs.completedDataIds != rhs.completedDataIds {return false}
    if lhs.lastSyncTimestamp != rhs.lastSyncTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
