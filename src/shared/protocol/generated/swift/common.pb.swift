// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 错误码枚举
enum Nearclip_Common_ErrorCode: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case errorNone // = 0
  case errorInvalidMessage // = 1
  case errorInvalidSignature // = 2
  case errorExpiredMessage // = 3
  case errorUnsupportedVersion // = 4
  case errorDeviceNotFound // = 5
  case errorPairingFailed // = 6
  case errorEncryptionFailed // = 7
  case errorNetworkError // = 8
  case errorTimeout // = 9
  case errorQuotaExceeded // = 10
  case errorInternalError // = 11
  case UNRECOGNIZED(Int)

  init() {
    self = .errorNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .errorNone
    case 1: self = .errorInvalidMessage
    case 2: self = .errorInvalidSignature
    case 3: self = .errorExpiredMessage
    case 4: self = .errorUnsupportedVersion
    case 5: self = .errorDeviceNotFound
    case 6: self = .errorPairingFailed
    case 7: self = .errorEncryptionFailed
    case 8: self = .errorNetworkError
    case 9: self = .errorTimeout
    case 10: self = .errorQuotaExceeded
    case 11: self = .errorInternalError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .errorNone: return 0
    case .errorInvalidMessage: return 1
    case .errorInvalidSignature: return 2
    case .errorExpiredMessage: return 3
    case .errorUnsupportedVersion: return 4
    case .errorDeviceNotFound: return 5
    case .errorPairingFailed: return 6
    case .errorEncryptionFailed: return 7
    case .errorNetworkError: return 8
    case .errorTimeout: return 9
    case .errorQuotaExceeded: return 10
    case .errorInternalError: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Nearclip_Common_ErrorCode] = [
    .errorNone,
    .errorInvalidMessage,
    .errorInvalidSignature,
    .errorExpiredMessage,
    .errorUnsupportedVersion,
    .errorDeviceNotFound,
    .errorPairingFailed,
    .errorEncryptionFailed,
    .errorNetworkError,
    .errorTimeout,
    .errorQuotaExceeded,
    .errorInternalError,
  ]

}

/// 标准错误消息
struct Nearclip_Common_ErrorMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: Nearclip_Common_ErrorCode = .errorNone

  var message: String = String()

  var details: String = String()

  var timestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 心跳消息
struct Nearclip_Common_Heartbeat: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceID: String = String()

  var timestamp: UInt64 = 0

  var sequenceNumber: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 心跳响应
struct Nearclip_Common_HeartbeatAck: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceID: String = String()

  var receivedTimestamp: UInt64 = 0

  var sequenceNumber: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 协议版本信息
struct Nearclip_Common_ProtocolVersion: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var major: UInt32 = 0

  var minor: UInt32 = 0

  var patch: UInt32 = 0

  var buildInfo: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 能力协商请求
struct Nearclip_Common_CapabilityNegotiation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var minVersion: Nearclip_Common_ProtocolVersion {
    get {return _minVersion ?? Nearclip_Common_ProtocolVersion()}
    set {_minVersion = newValue}
  }
  /// Returns true if `minVersion` has been explicitly set.
  var hasMinVersion: Bool {return self._minVersion != nil}
  /// Clears the value of `minVersion`. Subsequent reads from it will return its default value.
  mutating func clearMinVersion() {self._minVersion = nil}

  var maxVersion: Nearclip_Common_ProtocolVersion {
    get {return _maxVersion ?? Nearclip_Common_ProtocolVersion()}
    set {_maxVersion = newValue}
  }
  /// Returns true if `maxVersion` has been explicitly set.
  var hasMaxVersion: Bool {return self._maxVersion != nil}
  /// Clears the value of `maxVersion`. Subsequent reads from it will return its default value.
  mutating func clearMaxVersion() {self._maxVersion = nil}

  var supportedFeatures: [String] = []

  var requiredFeatures: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _minVersion: Nearclip_Common_ProtocolVersion? = nil
  fileprivate var _maxVersion: Nearclip_Common_ProtocolVersion? = nil
}

/// 能力协商响应
struct Nearclip_Common_CapabilityNegotiationResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var selectedVersion: Nearclip_Common_ProtocolVersion {
    get {return _selectedVersion ?? Nearclip_Common_ProtocolVersion()}
    set {_selectedVersion = newValue}
  }
  /// Returns true if `selectedVersion` has been explicitly set.
  var hasSelectedVersion: Bool {return self._selectedVersion != nil}
  /// Clears the value of `selectedVersion`. Subsequent reads from it will return its default value.
  mutating func clearSelectedVersion() {self._selectedVersion = nil}

  var supportedFeatures: [String] = []

  var unsupportedFeatures: [String] = []

  var compatibility: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _selectedVersion: Nearclip_Common_ProtocolVersion? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "nearclip.common"

extension Nearclip_Common_ErrorCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0ERROR_NONE\0\u{1}ERROR_INVALID_MESSAGE\0\u{1}ERROR_INVALID_SIGNATURE\0\u{1}ERROR_EXPIRED_MESSAGE\0\u{1}ERROR_UNSUPPORTED_VERSION\0\u{1}ERROR_DEVICE_NOT_FOUND\0\u{1}ERROR_PAIRING_FAILED\0\u{1}ERROR_ENCRYPTION_FAILED\0\u{1}ERROR_NETWORK_ERROR\0\u{1}ERROR_TIMEOUT\0\u{1}ERROR_QUOTA_EXCEEDED\0\u{1}ERROR_INTERNAL_ERROR\0")
}

extension Nearclip_Common_ErrorMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ErrorMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}details\0\u{1}timestamp\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.details) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .errorNone {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if !self.details.isEmpty {
      try visitor.visitSingularStringField(value: self.details, fieldNumber: 3)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Common_ErrorMessage, rhs: Nearclip_Common_ErrorMessage) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.details != rhs.details {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Common_Heartbeat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Heartbeat"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}device_id\0\u{1}timestamp\0\u{3}sequence_number\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.sequenceNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    if self.sequenceNumber != 0 {
      try visitor.visitSingularUInt32Field(value: self.sequenceNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Common_Heartbeat, rhs: Nearclip_Common_Heartbeat) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Common_HeartbeatAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HeartbeatAck"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}device_id\0\u{3}received_timestamp\0\u{3}sequence_number\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.receivedTimestamp) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.sequenceNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if self.receivedTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.receivedTimestamp, fieldNumber: 2)
    }
    if self.sequenceNumber != 0 {
      try visitor.visitSingularUInt32Field(value: self.sequenceNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Common_HeartbeatAck, rhs: Nearclip_Common_HeartbeatAck) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.receivedTimestamp != rhs.receivedTimestamp {return false}
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Common_ProtocolVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProtocolVersion"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}major\0\u{1}minor\0\u{1}patch\0\u{3}build_info\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.major) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.minor) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.patch) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.buildInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.major != 0 {
      try visitor.visitSingularUInt32Field(value: self.major, fieldNumber: 1)
    }
    if self.minor != 0 {
      try visitor.visitSingularUInt32Field(value: self.minor, fieldNumber: 2)
    }
    if self.patch != 0 {
      try visitor.visitSingularUInt32Field(value: self.patch, fieldNumber: 3)
    }
    if !self.buildInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.buildInfo, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Common_ProtocolVersion, rhs: Nearclip_Common_ProtocolVersion) -> Bool {
    if lhs.major != rhs.major {return false}
    if lhs.minor != rhs.minor {return false}
    if lhs.patch != rhs.patch {return false}
    if lhs.buildInfo != rhs.buildInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Common_CapabilityNegotiation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CapabilityNegotiation"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}min_version\0\u{3}max_version\0\u{3}supported_features\0\u{3}required_features\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._minVersion) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._maxVersion) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.supportedFeatures) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.requiredFeatures) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._minVersion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._maxVersion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.supportedFeatures.isEmpty {
      try visitor.visitRepeatedStringField(value: self.supportedFeatures, fieldNumber: 3)
    }
    if !self.requiredFeatures.isEmpty {
      try visitor.visitRepeatedStringField(value: self.requiredFeatures, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Common_CapabilityNegotiation, rhs: Nearclip_Common_CapabilityNegotiation) -> Bool {
    if lhs._minVersion != rhs._minVersion {return false}
    if lhs._maxVersion != rhs._maxVersion {return false}
    if lhs.supportedFeatures != rhs.supportedFeatures {return false}
    if lhs.requiredFeatures != rhs.requiredFeatures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nearclip_Common_CapabilityNegotiationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CapabilityNegotiationResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}selected_version\0\u{3}supported_features\0\u{3}unsupported_features\0\u{1}compatibility\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._selectedVersion) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.supportedFeatures) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.unsupportedFeatures) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.compatibility) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._selectedVersion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.supportedFeatures.isEmpty {
      try visitor.visitRepeatedStringField(value: self.supportedFeatures, fieldNumber: 2)
    }
    if !self.unsupportedFeatures.isEmpty {
      try visitor.visitRepeatedStringField(value: self.unsupportedFeatures, fieldNumber: 3)
    }
    if self.compatibility != false {
      try visitor.visitSingularBoolField(value: self.compatibility, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nearclip_Common_CapabilityNegotiationResponse, rhs: Nearclip_Common_CapabilityNegotiationResponse) -> Bool {
    if lhs._selectedVersion != rhs._selectedVersion {return false}
    if lhs.supportedFeatures != rhs.supportedFeatures {return false}
    if lhs.unsupportedFeatures != rhs.unsupportedFeatures {return false}
    if lhs.compatibility != rhs.compatibility {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
