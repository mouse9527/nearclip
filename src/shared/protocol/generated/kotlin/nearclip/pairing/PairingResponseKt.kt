// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: pairing.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package nearclip.pairing;

@kotlin.jvm.JvmName("-initializepairingResponse")
public inline fun pairingResponse(block: nearclip.pairing.PairingResponseKt.Dsl.() -> kotlin.Unit): nearclip.pairing.Pairing.PairingResponse =
  nearclip.pairing.PairingResponseKt.Dsl._create(nearclip.pairing.Pairing.PairingResponse.newBuilder()).apply { block() }._build()
/**
 * ```
 * 配对响应
 * ```
 *
 * Protobuf type `nearclip.pairing.PairingResponse`
 */
public object PairingResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: nearclip.pairing.Pairing.PairingResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: nearclip.pairing.Pairing.PairingResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): nearclip.pairing.Pairing.PairingResponse = _builder.build()

    /**
     * `string responder_id = 1;`
     */
    public var responderId: kotlin.String
      @kotlin.jvm.JvmName("getResponderId")
        get() = _builder.responderId
      @kotlin.jvm.JvmName("setResponderId")
        set(value) {
        _builder.responderId = value
      }
    /**
     * `string responder_id = 1;`
     */
    public fun clearResponderId() {
      _builder.clearResponderId()
    }

    /**
     * `string initiator_id = 2;`
     */
    public var initiatorId: kotlin.String
      @kotlin.jvm.JvmName("getInitiatorId")
        get() = _builder.initiatorId
      @kotlin.jvm.JvmName("setInitiatorId")
        set(value) {
        _builder.initiatorId = value
      }
    /**
     * `string initiator_id = 2;`
     */
    public fun clearInitiatorId() {
      _builder.clearInitiatorId()
    }

    /**
     * `bytes public_key = 3;`
     */
    public var publicKey: com.google.protobuf.ByteString
      @kotlin.jvm.JvmName("getPublicKey")
        get() = _builder.publicKey
      @kotlin.jvm.JvmName("setPublicKey")
        set(value) {
        _builder.publicKey = value
      }
    /**
     * `bytes public_key = 3;`
     */
    public fun clearPublicKey() {
      _builder.clearPublicKey()
    }

    /**
     * ```
     * 签名的随机数
     * ```
     *
     * `bytes signed_nonce = 4;`
     */
    public var signedNonce: com.google.protobuf.ByteString
      @kotlin.jvm.JvmName("getSignedNonce")
        get() = _builder.signedNonce
      @kotlin.jvm.JvmName("setSignedNonce")
        set(value) {
        _builder.signedNonce = value
      }
    /**
     * ```
     * 签名的随机数
     * ```
     *
     * `bytes signed_nonce = 4;`
     */
    public fun clearSignedNonce() {
      _builder.clearSignedNonce()
    }

    /**
     * ```
     * ECDH 共享密钥
     * ```
     *
     * `bytes shared_secret = 5;`
     */
    public var sharedSecret: com.google.protobuf.ByteString
      @kotlin.jvm.JvmName("getSharedSecret")
        get() = _builder.sharedSecret
      @kotlin.jvm.JvmName("setSharedSecret")
        set(value) {
        _builder.sharedSecret = value
      }
    /**
     * ```
     * ECDH 共享密钥
     * ```
     *
     * `bytes shared_secret = 5;`
     */
    public fun clearSharedSecret() {
      _builder.clearSharedSecret()
    }

    /**
     * `uint64 timestamp = 6;`
     */
    public var timestamp: kotlin.Long
      @kotlin.jvm.JvmName("getTimestamp")
        get() = _builder.timestamp
      @kotlin.jvm.JvmName("setTimestamp")
        set(value) {
        _builder.timestamp = value
      }
    /**
     * `uint64 timestamp = 6;`
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun nearclip.pairing.Pairing.PairingResponse.copy(block: `nearclip.pairing`.PairingResponseKt.Dsl.() -> kotlin.Unit): nearclip.pairing.Pairing.PairingResponse =
  `nearclip.pairing`.PairingResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

