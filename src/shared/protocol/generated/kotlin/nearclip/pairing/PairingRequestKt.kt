// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: pairing.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package nearclip.pairing;

@kotlin.jvm.JvmName("-initializepairingRequest")
public inline fun pairingRequest(block: nearclip.pairing.PairingRequestKt.Dsl.() -> kotlin.Unit): nearclip.pairing.Pairing.PairingRequest =
  nearclip.pairing.PairingRequestKt.Dsl._create(nearclip.pairing.Pairing.PairingRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * 配对请求
 * ```
 *
 * Protobuf type `nearclip.pairing.PairingRequest`
 */
public object PairingRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: nearclip.pairing.Pairing.PairingRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: nearclip.pairing.Pairing.PairingRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): nearclip.pairing.Pairing.PairingRequest = _builder.build()

    /**
     * `string initiator_id = 1;`
     */
    public var initiatorId: kotlin.String
      @kotlin.jvm.JvmName("getInitiatorId")
        get() = _builder.initiatorId
      @kotlin.jvm.JvmName("setInitiatorId")
        set(value) {
        _builder.initiatorId = value
      }
    /**
     * `string initiator_id = 1;`
     */
    public fun clearInitiatorId() {
      _builder.clearInitiatorId()
    }

    /**
     * `string target_id = 2;`
     */
    public var targetId: kotlin.String
      @kotlin.jvm.JvmName("getTargetId")
        get() = _builder.targetId
      @kotlin.jvm.JvmName("setTargetId")
        set(value) {
        _builder.targetId = value
      }
    /**
     * `string target_id = 2;`
     */
    public fun clearTargetId() {
      _builder.clearTargetId()
    }

    /**
     * `bytes public_key = 3;`
     */
    public var publicKey: com.google.protobuf.ByteString
      @kotlin.jvm.JvmName("getPublicKey")
        get() = _builder.publicKey
      @kotlin.jvm.JvmName("setPublicKey")
        set(value) {
        _builder.publicKey = value
      }
    /**
     * `bytes public_key = 3;`
     */
    public fun clearPublicKey() {
      _builder.clearPublicKey()
    }

    /**
     * `string device_name = 4;`
     */
    public var deviceName: kotlin.String
      @kotlin.jvm.JvmName("getDeviceName")
        get() = _builder.deviceName
      @kotlin.jvm.JvmName("setDeviceName")
        set(value) {
        _builder.deviceName = value
      }
    /**
     * `string device_name = 4;`
     */
    public fun clearDeviceName() {
      _builder.clearDeviceName()
    }

    /**
     * ```
     * 随机数，防止重放攻击
     * ```
     *
     * `bytes nonce = 5;`
     */
    public var nonce: com.google.protobuf.ByteString
      @kotlin.jvm.JvmName("getNonce")
        get() = _builder.nonce
      @kotlin.jvm.JvmName("setNonce")
        set(value) {
        _builder.nonce = value
      }
    /**
     * ```
     * 随机数，防止重放攻击
     * ```
     *
     * `bytes nonce = 5;`
     */
    public fun clearNonce() {
      _builder.clearNonce()
    }

    /**
     * `uint64 timestamp = 6;`
     */
    public var timestamp: kotlin.Long
      @kotlin.jvm.JvmName("getTimestamp")
        get() = _builder.timestamp
      @kotlin.jvm.JvmName("setTimestamp")
        set(value) {
        _builder.timestamp = value
      }
    /**
     * `uint64 timestamp = 6;`
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun nearclip.pairing.Pairing.PairingRequest.copy(block: `nearclip.pairing`.PairingRequestKt.Dsl.() -> kotlin.Unit): nearclip.pairing.Pairing.PairingRequest =
  `nearclip.pairing`.PairingRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

