// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sync.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package nearclip.sync;

@kotlin.jvm.JvmName("-initializeclipboardData")
public inline fun clipboardData(block: nearclip.sync.ClipboardDataKt.Dsl.() -> kotlin.Unit): nearclip.sync.Sync.ClipboardData =
  nearclip.sync.ClipboardDataKt.Dsl._create(nearclip.sync.Sync.ClipboardData.newBuilder()).apply { block() }._build()
/**
 * ```
 * 剪贴板数据项
 * ```
 *
 * Protobuf type `nearclip.sync.ClipboardData`
 */
public object ClipboardDataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: nearclip.sync.Sync.ClipboardData.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: nearclip.sync.Sync.ClipboardData.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): nearclip.sync.Sync.ClipboardData = _builder.build()

    /**
     * `string data_id = 1;`
     */
    public var dataId: kotlin.String
      @kotlin.jvm.JvmName("getDataId")
        get() = _builder.dataId
      @kotlin.jvm.JvmName("setDataId")
        set(value) {
        _builder.dataId = value
      }
    /**
     * `string data_id = 1;`
     */
    public fun clearDataId() {
      _builder.clearDataId()
    }

    /**
     * `.nearclip.sync.DataType type = 2;`
     */
    public var type: nearclip.sync.Sync.DataType
      @kotlin.jvm.JvmName("getType")
        get() = _builder.type
      @kotlin.jvm.JvmName("setType")
        set(value) {
        _builder.type = value
      }
    public var typeValue: kotlin.Int
      @kotlin.jvm.JvmName("getTypeValue")
        get() = _builder.typeValue
      @kotlin.jvm.JvmName("setTypeValue")
        set(value) {
        _builder.typeValue = value
      }
    /**
     * `.nearclip.sync.DataType type = 2;`
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * `bytes content = 3;`
     */
    public var content: com.google.protobuf.ByteString
      @kotlin.jvm.JvmName("getContent")
        get() = _builder.content
      @kotlin.jvm.JvmName("setContent")
        set(value) {
        _builder.content = value
      }
    /**
     * `bytes content = 3;`
     */
    public fun clearContent() {
      _builder.clearContent()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class MetadataProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `map<string, string> metadata = 4;`
     */
     public val metadata: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("getMetadataMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.metadataMap
      )
    /**
     * `map<string, string> metadata = 4;`
     */
    @kotlin.jvm.JvmName("putMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putMetadata(key, value)
       }
    /**
     * `map<string, string> metadata = 4;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setMetadata")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * `map<string, string> metadata = 4;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("removeMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .remove(key: kotlin.String) {
         _builder.removeMetadata(key)
       }
    /**
     * `map<string, string> metadata = 4;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("putAllMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllMetadata(map)
       }
    /**
     * `map<string, string> metadata = 4;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("clearMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .clear() {
         _builder.clearMetadata()
       }

    /**
     * `uint64 created_at = 5;`
     */
    public var createdAt: kotlin.Long
      @kotlin.jvm.JvmName("getCreatedAt")
        get() = _builder.createdAt
      @kotlin.jvm.JvmName("setCreatedAt")
        set(value) {
        _builder.createdAt = value
      }
    /**
     * `uint64 created_at = 5;`
     */
    public fun clearCreatedAt() {
      _builder.clearCreatedAt()
    }

    /**
     * `uint64 expires_at = 6;`
     */
    public var expiresAt: kotlin.Long
      @kotlin.jvm.JvmName("getExpiresAt")
        get() = _builder.expiresAt
      @kotlin.jvm.JvmName("setExpiresAt")
        set(value) {
        _builder.expiresAt = value
      }
    /**
     * `uint64 expires_at = 6;`
     */
    public fun clearExpiresAt() {
      _builder.clearExpiresAt()
    }

    /**
     * `string source_app = 7;`
     */
    public var sourceApp: kotlin.String
      @kotlin.jvm.JvmName("getSourceApp")
        get() = _builder.sourceApp
      @kotlin.jvm.JvmName("setSourceApp")
        set(value) {
        _builder.sourceApp = value
      }
    /**
     * `string source_app = 7;`
     */
    public fun clearSourceApp() {
      _builder.clearSourceApp()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun nearclip.sync.Sync.ClipboardData.copy(block: `nearclip.sync`.ClipboardDataKt.Dsl.() -> kotlin.Unit): nearclip.sync.Sync.ClipboardData =
  `nearclip.sync`.ClipboardDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

