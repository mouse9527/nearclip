// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sync.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package nearclip.sync;

@kotlin.jvm.JvmName("-initializedataChunk")
public inline fun dataChunk(block: nearclip.sync.DataChunkKt.Dsl.() -> kotlin.Unit): nearclip.sync.Sync.DataChunk =
  nearclip.sync.DataChunkKt.Dsl._create(nearclip.sync.Sync.DataChunk.newBuilder()).apply { block() }._build()
/**
 * ```
 * 数据分片信息
 * ```
 *
 * Protobuf type `nearclip.sync.DataChunk`
 */
public object DataChunkKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: nearclip.sync.Sync.DataChunk.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: nearclip.sync.Sync.DataChunk.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): nearclip.sync.Sync.DataChunk = _builder.build()

    /**
     * `string data_id = 1;`
     */
    public var dataId: kotlin.String
      @kotlin.jvm.JvmName("getDataId")
        get() = _builder.dataId
      @kotlin.jvm.JvmName("setDataId")
        set(value) {
        _builder.dataId = value
      }
    /**
     * `string data_id = 1;`
     */
    public fun clearDataId() {
      _builder.clearDataId()
    }

    /**
     * `uint32 chunk_index = 2;`
     */
    public var chunkIndex: kotlin.Int
      @kotlin.jvm.JvmName("getChunkIndex")
        get() = _builder.chunkIndex
      @kotlin.jvm.JvmName("setChunkIndex")
        set(value) {
        _builder.chunkIndex = value
      }
    /**
     * `uint32 chunk_index = 2;`
     */
    public fun clearChunkIndex() {
      _builder.clearChunkIndex()
    }

    /**
     * `uint32 total_chunks = 3;`
     */
    public var totalChunks: kotlin.Int
      @kotlin.jvm.JvmName("getTotalChunks")
        get() = _builder.totalChunks
      @kotlin.jvm.JvmName("setTotalChunks")
        set(value) {
        _builder.totalChunks = value
      }
    /**
     * `uint32 total_chunks = 3;`
     */
    public fun clearTotalChunks() {
      _builder.clearTotalChunks()
    }

    /**
     * `bytes chunk_data = 4;`
     */
    public var chunkData: com.google.protobuf.ByteString
      @kotlin.jvm.JvmName("getChunkData")
        get() = _builder.chunkData
      @kotlin.jvm.JvmName("setChunkData")
        set(value) {
        _builder.chunkData = value
      }
    /**
     * `bytes chunk_data = 4;`
     */
    public fun clearChunkData() {
      _builder.clearChunkData()
    }

    /**
     * `bytes checksum = 5;`
     */
    public var checksum: com.google.protobuf.ByteString
      @kotlin.jvm.JvmName("getChecksum")
        get() = _builder.checksum
      @kotlin.jvm.JvmName("setChecksum")
        set(value) {
        _builder.checksum = value
      }
    /**
     * `bytes checksum = 5;`
     */
    public fun clearChecksum() {
      _builder.clearChecksum()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun nearclip.sync.Sync.DataChunk.copy(block: `nearclip.sync`.DataChunkKt.Dsl.() -> kotlin.Unit): nearclip.sync.Sync.DataChunk =
  `nearclip.sync`.DataChunkKt.Dsl._create(this.toBuilder()).apply { block() }._build()

